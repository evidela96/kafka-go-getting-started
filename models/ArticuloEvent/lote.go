// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     DetalleDeArticulo.avsc
 */
package ArticuloEvent

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type Lote struct {
	Codigo *UnionNullString `json:"Codigo"`

	LoteDeFabricante *UnionNullString `json:"LoteDeFabricante"`

	LoteSecundario *UnionNullString `json:"LoteSecundario"`

	FechaDeVencimiento *UnionNullString `json:"FechaDeVencimiento"`

	OtrosDatos *UnionNullMetadato `json:"OtrosDatos"`
}

const LoteAvroCRC64Fingerprint = "\xc61\x7f:U\xda\xe3p"

func NewLote() Lote {
	r := Lote{}
	r.Codigo = nil
	r.LoteDeFabricante = nil
	r.LoteSecundario = nil
	r.FechaDeVencimiento = nil
	r.OtrosDatos = nil
	return r
}

func DeserializeLote(r io.Reader) (Lote, error) {
	t := NewLote()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeLoteFromSchema(r io.Reader, schema string) (Lote, error) {
	t := NewLote()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeLote(r Lote, w io.Writer) error {
	var err error
	err = writeUnionNullString(r.Codigo, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.LoteDeFabricante, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.LoteSecundario, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.FechaDeVencimiento, w)
	if err != nil {
		return err
	}
	err = writeUnionNullMetadato(r.OtrosDatos, w)
	if err != nil {
		return err
	}
	return err
}

func (r Lote) Serialize(w io.Writer) error {
	return writeLote(r, w)
}

func (r Lote) Schema() string {
	return "{\"fields\":[{\"default\":null,\"name\":\"Codigo\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"LoteDeFabricante\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"LoteSecundario\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"FechaDeVencimiento\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"OtrosDatos\",\"type\":[\"null\",{\"fields\":[{\"default\":null,\"name\":\"Meta\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"Contenido\",\"type\":[\"null\",\"string\"]}],\"name\":\"Metadato\",\"type\":\"record\"}]}],\"name\":\"Andreani.EventoWhArticulos.Events.Record.Lote\",\"type\":\"record\"}"
}

func (r Lote) SchemaName() string {
	return "Andreani.EventoWhArticulos.Events.Record.Lote"
}

func (_ Lote) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ Lote) SetInt(v int32)       { panic("Unsupported operation") }
func (_ Lote) SetLong(v int64)      { panic("Unsupported operation") }
func (_ Lote) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ Lote) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ Lote) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ Lote) SetString(v string)   { panic("Unsupported operation") }
func (_ Lote) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *Lote) Get(i int) types.Field {
	switch i {
	case 0:
		r.Codigo = NewUnionNullString()

		return r.Codigo
	case 1:
		r.LoteDeFabricante = NewUnionNullString()

		return r.LoteDeFabricante
	case 2:
		r.LoteSecundario = NewUnionNullString()

		return r.LoteSecundario
	case 3:
		r.FechaDeVencimiento = NewUnionNullString()

		return r.FechaDeVencimiento
	case 4:
		r.OtrosDatos = NewUnionNullMetadato()

		return r.OtrosDatos
	}
	panic("Unknown field index")
}

func (r *Lote) SetDefault(i int) {
	switch i {
	case 0:
		r.Codigo = nil
		return
	case 1:
		r.LoteDeFabricante = nil
		return
	case 2:
		r.LoteSecundario = nil
		return
	case 3:
		r.FechaDeVencimiento = nil
		return
	case 4:
		r.OtrosDatos = nil
		return
	}
	panic("Unknown field index")
}

func (r *Lote) NullField(i int) {
	switch i {
	case 0:
		r.Codigo = nil
		return
	case 1:
		r.LoteDeFabricante = nil
		return
	case 2:
		r.LoteSecundario = nil
		return
	case 3:
		r.FechaDeVencimiento = nil
		return
	case 4:
		r.OtrosDatos = nil
		return
	}
	panic("Not a nullable field index")
}

func (_ Lote) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ Lote) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ Lote) HintSize(int)                     { panic("Unsupported operation") }
func (_ Lote) Finalize()                        {}

func (_ Lote) AvroCRC64Fingerprint() []byte {
	return []byte(LoteAvroCRC64Fingerprint)
}

func (r Lote) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["Codigo"], err = json.Marshal(r.Codigo)
	if err != nil {
		return nil, err
	}
	output["LoteDeFabricante"], err = json.Marshal(r.LoteDeFabricante)
	if err != nil {
		return nil, err
	}
	output["LoteSecundario"], err = json.Marshal(r.LoteSecundario)
	if err != nil {
		return nil, err
	}
	output["FechaDeVencimiento"], err = json.Marshal(r.FechaDeVencimiento)
	if err != nil {
		return nil, err
	}
	output["OtrosDatos"], err = json.Marshal(r.OtrosDatos)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *Lote) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["Codigo"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Codigo); err != nil {
			return err
		}
	} else {
		r.Codigo = NewUnionNullString()

		r.Codigo = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["LoteDeFabricante"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.LoteDeFabricante); err != nil {
			return err
		}
	} else {
		r.LoteDeFabricante = NewUnionNullString()

		r.LoteDeFabricante = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["LoteSecundario"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.LoteSecundario); err != nil {
			return err
		}
	} else {
		r.LoteSecundario = NewUnionNullString()

		r.LoteSecundario = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["FechaDeVencimiento"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.FechaDeVencimiento); err != nil {
			return err
		}
	} else {
		r.FechaDeVencimiento = NewUnionNullString()

		r.FechaDeVencimiento = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["OtrosDatos"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.OtrosDatos); err != nil {
			return err
		}
	} else {
		r.OtrosDatos = NewUnionNullMetadato()

		r.OtrosDatos = nil
	}
	return nil
}
