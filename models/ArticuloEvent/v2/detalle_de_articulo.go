// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     DetalleDeArticulo.avsc
 */
package avro

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type DetalleDeArticulo struct {
	Codigo string `json:"Codigo"`

	EAN13 string `json:"EAN13"`

	Propietario string `json:"Propietario"`

	Lote Lote `json:"Lote"`

	OtrosDatos []Metadato `json:"OtrosDatos"`

	Descripcion string `json:"Descripcion"`

	ClaseDeExpedicion string `json:"ClaseDeExpedicion"`

	ClaseDeArticulo string `json:"ClaseDeArticulo"`

	PaisDeOrigen string `json:"PaisDeOrigen"`

	EsNumeroDeSerieDeEntradaUnico bool `json:"EsNumeroDeSerieDeEntradaUnico"`

	RequiereCapturaDatosEntrada bool `json:"RequiereCapturaDatosEntrada"`

	EsNumeroDeSerieSalidaUnico bool `json:"EsNumeroDeSerieSalidaUnico"`

	RequiereCapturaDatosSalida bool `json:"RequiereCapturaDatosSalida"`

	RequierecapturaTotalNumSeries bool `json:"RequierecapturaTotalNumSeries"`

	Caracteristicas []Metadato `json:"Caracteristicas"`

	Notas string `json:"Notas"`

	InstruccionesDePreparacion string `json:"InstruccionesDePreparacion"`

	VidaUtilEnDias int64 `json:"VidaUtilEnDias"`

	CodigoDeVidaUtil string `json:"CodigoDeVidaUtil"`

	IndicadorDeVidaUtil string `json:"IndicadorDeVidaUtil"`

	ConsumoEnDias int64 `json:"ConsumoEnDias"`

	VencimientoEnDias int64 `json:"VencimientoEnDias"`

	VidaUtilEntradaEnDias int64 `json:"VidaUtilEntradaEnDias"`

	AcondicionamientoSecundario string `json:"AcondicionamientoSecundario"`

	ZonaRepo string `json:"ZonaRepo"`

	Grupos []Metadato `json:"Grupos"`

	Volumen float64 `json:"Volumen"`

	PesoBruto float64 `json:"PesoBruto"`

	PesoTara float64 `json:"PesoTara"`

	PesoNeto float64 `json:"PesoNeto"`

	CamposLibres []Metadato `json:"CamposLibres"`
}

const DetalleDeArticuloAvroCRC64Fingerprint = "\x13z\x0f\xd8**)I"

func NewDetalleDeArticulo() DetalleDeArticulo {
	r := DetalleDeArticulo{}
	r.Lote = NewLote()

	r.OtrosDatos = make([]Metadato, 0)

	r.Caracteristicas = make([]Metadato, 0)

	r.Grupos = make([]Metadato, 0)

	r.CamposLibres = make([]Metadato, 0)

	return r
}

func DeserializeDetalleDeArticulo(r io.Reader) (DetalleDeArticulo, error) {
	t := NewDetalleDeArticulo()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeDetalleDeArticuloFromSchema(r io.Reader, schema string) (DetalleDeArticulo, error) {
	t := NewDetalleDeArticulo()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeDetalleDeArticulo(r DetalleDeArticulo, w io.Writer) error {
	var err error
	err = vm.WriteString(r.Codigo, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.EAN13, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Propietario, w)
	if err != nil {
		return err
	}
	err = writeLote(r.Lote, w)
	if err != nil {
		return err
	}
	err = writeArrayMetadato(r.OtrosDatos, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Descripcion, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.ClaseDeExpedicion, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.ClaseDeArticulo, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.PaisDeOrigen, w)
	if err != nil {
		return err
	}
	err = vm.WriteBool(r.EsNumeroDeSerieDeEntradaUnico, w)
	if err != nil {
		return err
	}
	err = vm.WriteBool(r.RequiereCapturaDatosEntrada, w)
	if err != nil {
		return err
	}
	err = vm.WriteBool(r.EsNumeroDeSerieSalidaUnico, w)
	if err != nil {
		return err
	}
	err = vm.WriteBool(r.RequiereCapturaDatosSalida, w)
	if err != nil {
		return err
	}
	err = vm.WriteBool(r.RequierecapturaTotalNumSeries, w)
	if err != nil {
		return err
	}
	err = writeArrayMetadato(r.Caracteristicas, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Notas, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.InstruccionesDePreparacion, w)
	if err != nil {
		return err
	}
	err = vm.WriteLong(r.VidaUtilEnDias, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.CodigoDeVidaUtil, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.IndicadorDeVidaUtil, w)
	if err != nil {
		return err
	}
	err = vm.WriteLong(r.ConsumoEnDias, w)
	if err != nil {
		return err
	}
	err = vm.WriteLong(r.VencimientoEnDias, w)
	if err != nil {
		return err
	}
	err = vm.WriteLong(r.VidaUtilEntradaEnDias, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.AcondicionamientoSecundario, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.ZonaRepo, w)
	if err != nil {
		return err
	}
	err = writeArrayMetadato(r.Grupos, w)
	if err != nil {
		return err
	}
	err = vm.WriteDouble(r.Volumen, w)
	if err != nil {
		return err
	}
	err = vm.WriteDouble(r.PesoBruto, w)
	if err != nil {
		return err
	}
	err = vm.WriteDouble(r.PesoTara, w)
	if err != nil {
		return err
	}
	err = vm.WriteDouble(r.PesoNeto, w)
	if err != nil {
		return err
	}
	err = writeArrayMetadato(r.CamposLibres, w)
	if err != nil {
		return err
	}
	return err
}

func (r DetalleDeArticulo) Serialize(w io.Writer) error {
	return writeDetalleDeArticulo(r, w)
}

func (r DetalleDeArticulo) Schema() string {
	return "{\"fields\":[{\"name\":\"Codigo\",\"type\":\"string\"},{\"name\":\"EAN13\",\"type\":\"string\"},{\"name\":\"Propietario\",\"type\":\"string\"},{\"name\":\"Lote\",\"type\":{\"fields\":[{\"name\":\"Codigo\",\"type\":\"string\"},{\"name\":\"LoteDeFabricante\",\"type\":\"string\"},{\"name\":\"LoteSecundario\",\"type\":\"string\"},{\"name\":\"FechaDeVencimiento\",\"type\":\"string\"},{\"name\":\"OtrosDatos\",\"type\":{\"items\":{\"fields\":[{\"name\":\"Meta\",\"type\":\"string\"},{\"name\":\"Contenido\",\"type\":\"string\"}],\"name\":\"Metadato\",\"type\":\"record\"},\"type\":\"array\"}}],\"name\":\"Lote\",\"type\":\"record\"}},{\"name\":\"OtrosDatos\",\"type\":{\"items\":\"Andreani.EventoWhArticulos.Events.Record.Metadato\",\"type\":\"array\"}},{\"name\":\"Descripcion\",\"type\":\"string\"},{\"name\":\"ClaseDeExpedicion\",\"type\":\"string\"},{\"name\":\"ClaseDeArticulo\",\"type\":\"string\"},{\"name\":\"PaisDeOrigen\",\"type\":\"string\"},{\"name\":\"EsNumeroDeSerieDeEntradaUnico\",\"type\":\"boolean\"},{\"name\":\"RequiereCapturaDatosEntrada\",\"type\":\"boolean\"},{\"name\":\"EsNumeroDeSerieSalidaUnico\",\"type\":\"boolean\"},{\"name\":\"RequiereCapturaDatosSalida\",\"type\":\"boolean\"},{\"name\":\"RequierecapturaTotalNumSeries\",\"type\":\"boolean\"},{\"name\":\"Caracteristicas\",\"type\":{\"items\":\"Andreani.EventoWhArticulos.Events.Record.Metadato\",\"type\":\"array\"}},{\"name\":\"Notas\",\"type\":\"string\"},{\"name\":\"InstruccionesDePreparacion\",\"type\":\"string\"},{\"name\":\"VidaUtilEnDias\",\"type\":\"long\"},{\"name\":\"CodigoDeVidaUtil\",\"type\":\"string\"},{\"name\":\"IndicadorDeVidaUtil\",\"type\":\"string\"},{\"name\":\"ConsumoEnDias\",\"type\":\"long\"},{\"name\":\"VencimientoEnDias\",\"type\":\"long\"},{\"name\":\"VidaUtilEntradaEnDias\",\"type\":\"long\"},{\"name\":\"AcondicionamientoSecundario\",\"type\":\"string\"},{\"name\":\"ZonaRepo\",\"type\":\"string\"},{\"name\":\"Grupos\",\"type\":{\"items\":\"Andreani.EventoWhArticulos.Events.Record.Metadato\",\"type\":\"array\"}},{\"name\":\"Volumen\",\"type\":\"double\"},{\"name\":\"PesoBruto\",\"type\":\"double\"},{\"name\":\"PesoTara\",\"type\":\"double\"},{\"name\":\"PesoNeto\",\"type\":\"double\"},{\"name\":\"CamposLibres\",\"type\":{\"items\":\"Andreani.EventoWhArticulos.Events.Record.Metadato\",\"type\":\"array\"}}],\"name\":\"Andreani.EventoWhArticulos.Events.Record.DetalleDeArticulo\",\"type\":\"record\"}"
}

func (r DetalleDeArticulo) SchemaName() string {
	return "Andreani.EventoWhArticulos.Events.Record.DetalleDeArticulo"
}

func (_ DetalleDeArticulo) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ DetalleDeArticulo) SetInt(v int32)       { panic("Unsupported operation") }
func (_ DetalleDeArticulo) SetLong(v int64)      { panic("Unsupported operation") }
func (_ DetalleDeArticulo) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ DetalleDeArticulo) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ DetalleDeArticulo) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ DetalleDeArticulo) SetString(v string)   { panic("Unsupported operation") }
func (_ DetalleDeArticulo) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *DetalleDeArticulo) Get(i int) types.Field {
	switch i {
	case 0:
		w := types.String{Target: &r.Codigo}

		return w

	case 1:
		w := types.String{Target: &r.EAN13}

		return w

	case 2:
		w := types.String{Target: &r.Propietario}

		return w

	case 3:
		r.Lote = NewLote()

		w := types.Record{Target: &r.Lote}

		return w

	case 4:
		r.OtrosDatos = make([]Metadato, 0)

		w := ArrayMetadatoWrapper{Target: &r.OtrosDatos}

		return w

	case 5:
		w := types.String{Target: &r.Descripcion}

		return w

	case 6:
		w := types.String{Target: &r.ClaseDeExpedicion}

		return w

	case 7:
		w := types.String{Target: &r.ClaseDeArticulo}

		return w

	case 8:
		w := types.String{Target: &r.PaisDeOrigen}

		return w

	case 9:
		w := types.Boolean{Target: &r.EsNumeroDeSerieDeEntradaUnico}

		return w

	case 10:
		w := types.Boolean{Target: &r.RequiereCapturaDatosEntrada}

		return w

	case 11:
		w := types.Boolean{Target: &r.EsNumeroDeSerieSalidaUnico}

		return w

	case 12:
		w := types.Boolean{Target: &r.RequiereCapturaDatosSalida}

		return w

	case 13:
		w := types.Boolean{Target: &r.RequierecapturaTotalNumSeries}

		return w

	case 14:
		r.Caracteristicas = make([]Metadato, 0)

		w := ArrayMetadatoWrapper{Target: &r.Caracteristicas}

		return w

	case 15:
		w := types.String{Target: &r.Notas}

		return w

	case 16:
		w := types.String{Target: &r.InstruccionesDePreparacion}

		return w

	case 17:
		w := types.Long{Target: &r.VidaUtilEnDias}

		return w

	case 18:
		w := types.String{Target: &r.CodigoDeVidaUtil}

		return w

	case 19:
		w := types.String{Target: &r.IndicadorDeVidaUtil}

		return w

	case 20:
		w := types.Long{Target: &r.ConsumoEnDias}

		return w

	case 21:
		w := types.Long{Target: &r.VencimientoEnDias}

		return w

	case 22:
		w := types.Long{Target: &r.VidaUtilEntradaEnDias}

		return w

	case 23:
		w := types.String{Target: &r.AcondicionamientoSecundario}

		return w

	case 24:
		w := types.String{Target: &r.ZonaRepo}

		return w

	case 25:
		r.Grupos = make([]Metadato, 0)

		w := ArrayMetadatoWrapper{Target: &r.Grupos}

		return w

	case 26:
		w := types.Double{Target: &r.Volumen}

		return w

	case 27:
		w := types.Double{Target: &r.PesoBruto}

		return w

	case 28:
		w := types.Double{Target: &r.PesoTara}

		return w

	case 29:
		w := types.Double{Target: &r.PesoNeto}

		return w

	case 30:
		r.CamposLibres = make([]Metadato, 0)

		w := ArrayMetadatoWrapper{Target: &r.CamposLibres}

		return w

	}
	panic("Unknown field index")
}

func (r *DetalleDeArticulo) SetDefault(i int) {
	switch i {
	}
	panic("Unknown field index")
}

func (r *DetalleDeArticulo) NullField(i int) {
	switch i {
	}
	panic("Not a nullable field index")
}

func (_ DetalleDeArticulo) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ DetalleDeArticulo) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ DetalleDeArticulo) HintSize(int)                     { panic("Unsupported operation") }
func (_ DetalleDeArticulo) Finalize()                        {}

func (_ DetalleDeArticulo) AvroCRC64Fingerprint() []byte {
	return []byte(DetalleDeArticuloAvroCRC64Fingerprint)
}

func (r DetalleDeArticulo) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["Codigo"], err = json.Marshal(r.Codigo)
	if err != nil {
		return nil, err
	}
	output["EAN13"], err = json.Marshal(r.EAN13)
	if err != nil {
		return nil, err
	}
	output["Propietario"], err = json.Marshal(r.Propietario)
	if err != nil {
		return nil, err
	}
	output["Lote"], err = json.Marshal(r.Lote)
	if err != nil {
		return nil, err
	}
	output["OtrosDatos"], err = json.Marshal(r.OtrosDatos)
	if err != nil {
		return nil, err
	}
	output["Descripcion"], err = json.Marshal(r.Descripcion)
	if err != nil {
		return nil, err
	}
	output["ClaseDeExpedicion"], err = json.Marshal(r.ClaseDeExpedicion)
	if err != nil {
		return nil, err
	}
	output["ClaseDeArticulo"], err = json.Marshal(r.ClaseDeArticulo)
	if err != nil {
		return nil, err
	}
	output["PaisDeOrigen"], err = json.Marshal(r.PaisDeOrigen)
	if err != nil {
		return nil, err
	}
	output["EsNumeroDeSerieDeEntradaUnico"], err = json.Marshal(r.EsNumeroDeSerieDeEntradaUnico)
	if err != nil {
		return nil, err
	}
	output["RequiereCapturaDatosEntrada"], err = json.Marshal(r.RequiereCapturaDatosEntrada)
	if err != nil {
		return nil, err
	}
	output["EsNumeroDeSerieSalidaUnico"], err = json.Marshal(r.EsNumeroDeSerieSalidaUnico)
	if err != nil {
		return nil, err
	}
	output["RequiereCapturaDatosSalida"], err = json.Marshal(r.RequiereCapturaDatosSalida)
	if err != nil {
		return nil, err
	}
	output["RequierecapturaTotalNumSeries"], err = json.Marshal(r.RequierecapturaTotalNumSeries)
	if err != nil {
		return nil, err
	}
	output["Caracteristicas"], err = json.Marshal(r.Caracteristicas)
	if err != nil {
		return nil, err
	}
	output["Notas"], err = json.Marshal(r.Notas)
	if err != nil {
		return nil, err
	}
	output["InstruccionesDePreparacion"], err = json.Marshal(r.InstruccionesDePreparacion)
	if err != nil {
		return nil, err
	}
	output["VidaUtilEnDias"], err = json.Marshal(r.VidaUtilEnDias)
	if err != nil {
		return nil, err
	}
	output["CodigoDeVidaUtil"], err = json.Marshal(r.CodigoDeVidaUtil)
	if err != nil {
		return nil, err
	}
	output["IndicadorDeVidaUtil"], err = json.Marshal(r.IndicadorDeVidaUtil)
	if err != nil {
		return nil, err
	}
	output["ConsumoEnDias"], err = json.Marshal(r.ConsumoEnDias)
	if err != nil {
		return nil, err
	}
	output["VencimientoEnDias"], err = json.Marshal(r.VencimientoEnDias)
	if err != nil {
		return nil, err
	}
	output["VidaUtilEntradaEnDias"], err = json.Marshal(r.VidaUtilEntradaEnDias)
	if err != nil {
		return nil, err
	}
	output["AcondicionamientoSecundario"], err = json.Marshal(r.AcondicionamientoSecundario)
	if err != nil {
		return nil, err
	}
	output["ZonaRepo"], err = json.Marshal(r.ZonaRepo)
	if err != nil {
		return nil, err
	}
	output["Grupos"], err = json.Marshal(r.Grupos)
	if err != nil {
		return nil, err
	}
	output["Volumen"], err = json.Marshal(r.Volumen)
	if err != nil {
		return nil, err
	}
	output["PesoBruto"], err = json.Marshal(r.PesoBruto)
	if err != nil {
		return nil, err
	}
	output["PesoTara"], err = json.Marshal(r.PesoTara)
	if err != nil {
		return nil, err
	}
	output["PesoNeto"], err = json.Marshal(r.PesoNeto)
	if err != nil {
		return nil, err
	}
	output["CamposLibres"], err = json.Marshal(r.CamposLibres)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *DetalleDeArticulo) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["Codigo"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Codigo); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Codigo")
	}
	val = func() json.RawMessage {
		if v, ok := fields["EAN13"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.EAN13); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for EAN13")
	}
	val = func() json.RawMessage {
		if v, ok := fields["Propietario"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Propietario); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Propietario")
	}
	val = func() json.RawMessage {
		if v, ok := fields["Lote"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Lote); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Lote")
	}
	val = func() json.RawMessage {
		if v, ok := fields["OtrosDatos"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.OtrosDatos); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for OtrosDatos")
	}
	val = func() json.RawMessage {
		if v, ok := fields["Descripcion"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Descripcion); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Descripcion")
	}
	val = func() json.RawMessage {
		if v, ok := fields["ClaseDeExpedicion"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.ClaseDeExpedicion); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for ClaseDeExpedicion")
	}
	val = func() json.RawMessage {
		if v, ok := fields["ClaseDeArticulo"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.ClaseDeArticulo); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for ClaseDeArticulo")
	}
	val = func() json.RawMessage {
		if v, ok := fields["PaisDeOrigen"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.PaisDeOrigen); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for PaisDeOrigen")
	}
	val = func() json.RawMessage {
		if v, ok := fields["EsNumeroDeSerieDeEntradaUnico"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.EsNumeroDeSerieDeEntradaUnico); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for EsNumeroDeSerieDeEntradaUnico")
	}
	val = func() json.RawMessage {
		if v, ok := fields["RequiereCapturaDatosEntrada"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.RequiereCapturaDatosEntrada); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for RequiereCapturaDatosEntrada")
	}
	val = func() json.RawMessage {
		if v, ok := fields["EsNumeroDeSerieSalidaUnico"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.EsNumeroDeSerieSalidaUnico); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for EsNumeroDeSerieSalidaUnico")
	}
	val = func() json.RawMessage {
		if v, ok := fields["RequiereCapturaDatosSalida"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.RequiereCapturaDatosSalida); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for RequiereCapturaDatosSalida")
	}
	val = func() json.RawMessage {
		if v, ok := fields["RequierecapturaTotalNumSeries"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.RequierecapturaTotalNumSeries); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for RequierecapturaTotalNumSeries")
	}
	val = func() json.RawMessage {
		if v, ok := fields["Caracteristicas"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Caracteristicas); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Caracteristicas")
	}
	val = func() json.RawMessage {
		if v, ok := fields["Notas"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Notas); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Notas")
	}
	val = func() json.RawMessage {
		if v, ok := fields["InstruccionesDePreparacion"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.InstruccionesDePreparacion); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for InstruccionesDePreparacion")
	}
	val = func() json.RawMessage {
		if v, ok := fields["VidaUtilEnDias"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.VidaUtilEnDias); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for VidaUtilEnDias")
	}
	val = func() json.RawMessage {
		if v, ok := fields["CodigoDeVidaUtil"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.CodigoDeVidaUtil); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for CodigoDeVidaUtil")
	}
	val = func() json.RawMessage {
		if v, ok := fields["IndicadorDeVidaUtil"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.IndicadorDeVidaUtil); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for IndicadorDeVidaUtil")
	}
	val = func() json.RawMessage {
		if v, ok := fields["ConsumoEnDias"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.ConsumoEnDias); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for ConsumoEnDias")
	}
	val = func() json.RawMessage {
		if v, ok := fields["VencimientoEnDias"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.VencimientoEnDias); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for VencimientoEnDias")
	}
	val = func() json.RawMessage {
		if v, ok := fields["VidaUtilEntradaEnDias"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.VidaUtilEntradaEnDias); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for VidaUtilEntradaEnDias")
	}
	val = func() json.RawMessage {
		if v, ok := fields["AcondicionamientoSecundario"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.AcondicionamientoSecundario); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for AcondicionamientoSecundario")
	}
	val = func() json.RawMessage {
		if v, ok := fields["ZonaRepo"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.ZonaRepo); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for ZonaRepo")
	}
	val = func() json.RawMessage {
		if v, ok := fields["Grupos"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Grupos); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Grupos")
	}
	val = func() json.RawMessage {
		if v, ok := fields["Volumen"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Volumen); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Volumen")
	}
	val = func() json.RawMessage {
		if v, ok := fields["PesoBruto"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.PesoBruto); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for PesoBruto")
	}
	val = func() json.RawMessage {
		if v, ok := fields["PesoTara"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.PesoTara); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for PesoTara")
	}
	val = func() json.RawMessage {
		if v, ok := fields["PesoNeto"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.PesoNeto); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for PesoNeto")
	}
	val = func() json.RawMessage {
		if v, ok := fields["CamposLibres"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.CamposLibres); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for CamposLibres")
	}
	return nil
}
